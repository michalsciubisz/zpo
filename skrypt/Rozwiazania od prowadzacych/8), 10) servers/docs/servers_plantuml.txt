@startuml
' --------

hide empty members


abstract class Server {
    + {static} n_max_returned_entries
    + __init__(self, *args, **kwargs)
    + get_entries(self, n_letters: int): List[Product]
    - {abstract} _get_entries_helper(self, n_letters: int = 1): List[Product]
    - {static} _is_matching_product_name(cls, n_letters: int, name: str):
}

class Exception {
}
note right: klasa wbudowana

class ServerError {
}
note right: klasa bazowa dla wyjątków związanych z serwerami
ServerError --|> Exception

class TooManyProductsFoundError {
}
TooManyProductsFoundError --|> ServerError 

Server ..> TooManyProductsFoundError : "<< throws >>"
note right on link: UML nie definiuje standardowego opisu takiej sytuacji

class ListServer {
    + __init__(self, products: List[Product], *args, **kwargs)
    + products: List[Product]
    - _get_entries_helper(self, n_letters: int = 1): List[Product]
}
ListServer --|> Server

class MapServer {
    + __init__(self, products: List[Product], *args, **kwargs)
    + products: Dict[str, Product]
    - _get_entries_helper(self, n_letters: int = 1): List[Product]
}
MapServer --|> Server

class Product {
    + __init__(self, name: str, price: float)
    + name: str
    + price: float
}

Product "*" --* "1" ListServer
Product "*" --* "1" MapServer

' ListServer "1" *-- "*" Product
' MapServer "1" *-- "*" Product



class Client {
    + __init__(self, server: ServerType)
    + server: Server
    + get_total_price(self, n_letters: Optional[int]): float
}
Server -o Client


' --------
@enduml